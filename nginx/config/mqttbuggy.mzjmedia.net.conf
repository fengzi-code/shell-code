upstream mqttbuggy_backend {
#      每个请求按照访问ip的hash结果分配，这样每个访客会固定访问一个后端服务器
#      ip_hash;
#----------------------------------------------------------------------
#weight：表示当前server负载权重,max_fails 连接失败次数,fail_timeout 连接失败超时时间
      server 192.168.1.30:8084 weight=100 max_fails=2 fail_timeout=30s;
      server 192.168.1.31:8084 weight=100 max_fails=2 fail_timeout=30s;
      keepalive 128;
#----------------------------------------------------------------------
#      fair顾名思义，公平地按照后端服务器的响应时间（rt）来分配请求，响应时间短即rt小的后端服务器优先分配请求。
#      如果需要使用这种调度算法，必须下载Nginx的upstr_fair模块。
#      fair;

#      按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下
#      hash $request_uri;
#      hash_method crc32;
#      其中，hash_method为使用的hash算法，需要注意的是：此时，server语句中不能加weight等参数
}

server {
    listen       80;
    listen       443 ssl;
    server_name  mqttbuggy.mzjmedia.net;
#   root /home/eagle/eagle-h5/;
    index index.html index.htm;
    access_log  /var/log/nginx/mqttbuggy.mzjmedia.net_access.log  main;
    error_log   /var/log/nginx/mqttbuggy.mzjmedia.net_error.log;
    #error_page   500 502 503 504  /50x.html;
  ignore_invalid_headers off; #pass through headers from Jenkins which are considered invalid by Nginx server.



        ssi on;
        ssi_silent_errors on;
        ssi_types text/shtml;
#        ssl on;
    ssl_certificate /etc/letsencrypt/live/mqttbuggy.mzjmedia.net/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mqttbuggy.mzjmedia.net/privkey.pem; # managed by Certbot

#        ssl_prefer_server_ciphers   on;


        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
	ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    location ~ /.well-known/{
    root /opt/apigwuatcdb;
    }
    location ~ /rLvQD5zfDe.txt{
    root /opt/apigwuatcdb;
    }

location = /mqtt {
        proxy_pass https://mqttbuggy.mzjmedia.net:8084;
        proxy_redirect off;
        proxy_set_header Host mqttbuggy.mzjmedia.net:8084;

        proxy_set_header Sec-WebSocket-Protocol mqtt;
        more_clear_headers Sec-WebSocket-Protocol;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        }



    location / {
#        try_files $uri $uri/ /index.html;
	proxy_pass http://mqttbuggy_backend;
        client_max_body_size 500m;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header REMOTE-HOST $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     }







}


